import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class BinaryHeap<T extends Comparable<T>> {
  private List<T> heap = null;
  public BinaryHeap() {
    this(1);
  }
  public BinaryHeap(int sz) {
    heap = new ArrayList<>(sz);
  }
  public BinaryHeap(T[] elems) {

    int heapSize = elems.length;
    heap = new ArrayList<T>(heapSize);
    for (int i = 0; i < heapSize; i++) heap.add(elems[i]);
    for (int i = Math.max(0, (heapSize / 2) - 1); i >= 0; i--) sink(i);
  }
  public BinaryHeap(Collection<T> elems) {

    int heapSize = elems.size();
    heap = new ArrayList<T>(heapSize);
    heap.addAll(elems);
    for (int i = Math.max(0, (heapSize / 2) - 1); i >= 0; i--) sink(i);
  }
  public boolean isEmpty() {
    return size() == 0;
  }
  public void clear() {
    heap.clear();
  }
  public int size() {
    return heap.size();
  }
  public T peek() {
    if (isEmpty()) return null;
    return heap.get(0);
  }
  public T poll() {
    return removeAt(0);
  }
  public boolean contains(T elem) {
    // Linear scan to check containment
    for (int i = 0; i < size(); i++) if (heap.get(i).equals(elem)) return true;
    return false;
  }
  public void add(T elem) {

    if (elem == null) throw new IllegalArgumentException();

    heap.add(elem);

    int indexOfLastElem = size() - 1;
    swim(indexOfLastElem);
  }
  private boolean less(int i, int j) {
    T node1 = heap.get(i);
    T node2 = heap.get(j);
    return node1.compareTo(node2) <= 0;
  }
  private void swim(int k) {
    int parent = (k - 1) / 2;
    while (k > 0 && less(k, parent)) {
      // Exchange k with the parent
      swap(parent, k);
      k = parent;

      // Grab the index of the next parent node WRT to k
      parent = (k - 1) / 2;
    }
  }

  // Top down node sink, O(log(n))
  private void sink(int k) {
    int heapSize = size();
    while (true) {
      int left = 2 * k + 1; 
      int right = 2 * k + 2;
      int smallest = left; 
      if (right < heapSize && less(right, left)) smallest = right;
      if (left >= heapSize || less(k, smallest)) break;
      swap(smallest, k);
      k = smallest;
    }
  }
  private void swap(int i, int j) {
    T elem_i = heap.get(i);
    T elem_j = heap.get(j);

    heap.set(i, elem_j);
    heap.set(j, elem_i);
  }
  public boolean remove(T element) {
    if (element == null) return false;
    for (int i = 0; i < size(); i++) {
      if (element.equals(heap.get(i))) {
        removeAt(i);
        return true;
      }
    }
    return false;
  }
  private T removeAt(int i) {
    if (isEmpty()) return null;
    int indexOfLastElem = size() - 1;
    T removed_data = heap.get(i);
    swap(i, indexOfLastElem);
    heap.remove(indexOfLastElem);
    if (i == indexOfLastElem) return removed_data;
    T elem = heap.get(i);
    sink(i);
    if (heap.get(i).equals(elem)) swim(i);
    return removed_data;
  }
  public boolean isMinHeap(int k) {
    int heapSize = size();
    if (k >= heapSize) return true;

    int left = 2 * k + 1;
    int right = 2 * k + 2;
    if (left < heapSize && !less(k, left)) return false;
[10:32 pm, 05/08/2022] Tejasvi: return isMinHeap(left) && isMinHeap(right);
  }

  @Override
  public String toString() {
    return heap.toString();
  }
}


public class Example1 {
  public static void main(String[] args) {
    int a = 0;
    if (a >= 0) {
      System.out.println(">= 0");
      if (a != 0) {
        System.out.println("!= 0");
      }
    } else {
      System.out.println("< 0");
    }
  }
}
public class Example2 {
  public static void main(String[] args) {
    int a = 0;
    if (a >= 0) {
      System.out.println(">= 0");
    } else {
      System.out.println("< 0");
    }
    if (a != 0) {
      System.out.println("!= 0");
    }
  }
}
